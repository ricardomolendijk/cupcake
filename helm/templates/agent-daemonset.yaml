{{- if .Values.agent.enabled -}}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "cupcake.fullname" . }}-agent
  namespace: {{ include "cupcake.namespace" . }}
  labels:
    {{- include "cupcake.agent.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "cupcake.agent.selectorLabels" . | nindent 6 }}
  updateStrategy:
    {{- toYaml .Values.agent.updateStrategy | nindent 4 }}
  template:
    metadata:
      annotations:
        {{- with .Values.agent.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "cupcake.agent.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cupcake.agent.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.agent.podSecurityContext | nindent 8 }}
      hostNetwork: true
      hostPID: true
      containers:
        - name: agent
          securityContext:
            {{- toYaml .Values.agent.securityContext | nindent 12 }}
          image: "{{ .Values.agent.image.repository }}:{{ .Values.agent.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.agent.image.pullPolicy }}
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: HOSTPATH_ROOT
              value: {{ .Values.agent.hostPath | quote }}
            - name: BACKUP_STORE_ENABLED
              value: {{ .Values.externalStore.enabled | quote }}
            {{- if .Values.externalStore.enabled }}
            - name: BACKUP_STORE_TYPE
              value: {{ .Values.externalStore.type | quote }}
            {{- if eq .Values.externalStore.type "s3" }}
            - name: BACKUP_STORE_BUCKET
              value: {{ .Values.externalStore.s3.bucket | quote }}
            - name: BACKUP_STORE_ENDPOINT
              value: {{ .Values.externalStore.s3.endpoint | quote }}
            - name: BACKUP_STORE_REGION
              value: {{ .Values.externalStore.s3.region | quote }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "cupcake.externalStoreSecretName" . }}
                  key: access-key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "cupcake.externalStoreSecretName" . }}
                  key: secret-key
            {{- else if eq .Values.externalStore.type "gcs" }}
            - name: BACKUP_STORE_BUCKET
              value: {{ .Values.externalStore.gcs.bucket | quote }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/google/key.json
            {{- end }}
            {{- end }}
            - name: LOG_LEVEL
              value: {{ .Values.agent.env.logLevel | quote }}
            - name: RECONCILE_INTERVAL
              value: {{ .Values.agent.env.reconcileInterval | quote }}
          resources:
            {{- toYaml .Values.agent.resources | nindent 12 }}
          volumeMounts:
            - name: hostpath
              mountPath: {{ .Values.agent.hostPath }}
            - name: host-root
              mountPath: /host
              mountPropagation: HostToContainer
            - name: etc-kubernetes
              mountPath: /etc/kubernetes
            - name: var-lib-kubelet
              mountPath: /var/lib/kubelet
            - name: usr-bin
              mountPath: /usr/bin
            - name: run
              mountPath: /run
            {{- if and .Values.externalStore.enabled (eq .Values.externalStore.type "gcs") }}
            - name: gcs-key
              mountPath: /var/secrets/google
              readOnly: true
            {{- end }}
      volumes:
        - name: hostpath
          hostPath:
            path: {{ .Values.agent.hostPath }}
            type: DirectoryOrCreate
        - name: host-root
          hostPath:
            path: /
        - name: etc-kubernetes
          hostPath:
            path: /etc/kubernetes
        - name: var-lib-kubelet
          hostPath:
            path: /var/lib/kubelet
        - name: usr-bin
          hostPath:
            path: /usr/bin
        - name: run
          hostPath:
            path: /run
        {{- if and .Values.externalStore.enabled (eq .Values.externalStore.type "gcs") }}
        - name: gcs-key
          secret:
            secretName: {{ include "cupcake.externalStoreSecretName" . }}
            items:
              - key: service-account-key
                path: key.json
        {{- end }}
      {{- with .Values.agent.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.agent.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
